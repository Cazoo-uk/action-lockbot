name: Lockbot action
description: Releases or acquires lock

inputs:
  action:
    type: choice
    description: Lockbot locking action (release or acquire)
    options:
      - acquire
      - release
  env:
    description: Environment
    required: true
  endpoint:
    description: Lockbot endpoint
    required: true
  auth_token:
    description: Lockbot Auth Token
    required: true
  api_owner:
    description: Slack member Id
    required: true

runs:
  using: composite
  steps:
    - name: Release lock
      if: inputs.action == 'release'
      env:
        ENV_NAME: ${{ github.event.repository.name }}-${{ inputs.env }}
        LOCKBOT_ENDPOINT: ${{ inputs.endpoint }}
        LOCKBOT_AUTH_TOKEN: ${{ inputs.auth_token }}
        GITHUB_ACTOR: ${{ github.actor }}
      shell: bash
      run: |
        LOCKBOT_ENV_NAME="${ENV_NAME}||${GITHUB_ACTOR}"
        echo "LOCKBOT_ENV_NAME: $LOCKBOT_ENV_NAME"

        RESPONSE_CODE=$(curl --silent --output /dev/stderr --write-out "%{http_code}" -X DELETE "$LOCKBOT_ENDPOINT/$LOCKBOT_ENV_NAME" -H "Authorization: Basic $LOCKBOT_AUTH_TOKEN")
        if [ "$RESPONSE_CODE" -lt 299 ]; then
            echo "Successfully unlocked."
            exit 0
        else
            echo "Failed to unlock the environment."
            echo "Response code was: $RESPONSE_CODE"
            exit 1
        fi

    - name: Acquire lock
      if: inputs.action == 'acquire'
      env:
        ENV_NAME: ${{ github.event.repository.name }}-${{ inputs.env }}
        LOCKBOT_ENDPOINT: ${{ inputs.endpoint }}
        LOCKBOT_AUTH_TOKEN: ${{ inputs.auth_token }}
        GITHUB_ACTOR: ${{ github.actor }}
        LOCKBOT_API_OWNER: ${{ inputs.api_owner }}
      shell: bash
      run: |
        LOCKBOT_ENV_NAME="${ENV_NAME}||${GITHUB_ACTOR}"
        echo "LOCKBOT_ENV_NAME: $LOCKBOT_ENV_NAME"

        ALL_LOCKS=$(curl "$LOCKBOT_ENDPOINT" -H "Authorization: Basic $LOCKBOT_AUTH_TOKEN")

        echo "ALL_LOCKS: $ALL_LOCKS"

        ENV_IS_LOCKED=$(echo "$ALL_LOCKS" | jq "[.[] | select(.name|test(\"^$ENV_NAME\"))] | length")
        ENV_IS_LOCKED_TO_THIS_USER=$(echo "$ALL_LOCKS" | jq --arg key "$LOCKBOT_ENV_NAME" '[.[] | select(.name==$key)] | length')

        echo "Lockbot response was:"
        echo "$ALL_LOCKS" | jq
        echo "ENV_IS_LOCKED: $ENV_IS_LOCKED"
        echo "ENV_IS_LOCKED_TO_THIS_USER: $ENV_IS_LOCKED_TO_THIS_USER"
        if [ "$ENV_IS_LOCKED" -eq 0 ]; then
            echo "Environment not locked. Going to lock it now."
            RESPONSE_CODE=$(curl --silent --output /dev/stderr --write-out "%{http_code}" "$LOCKBOT_ENDPOINT" -H "Authorization: Basic $LOCKBOT_AUTH_TOKEN" --data-raw "{ \"name\": \"$LOCKBOT_ENV_NAME\", \"owner\": \"$LOCKBOT_API_OWNER\"}")
            if [ "$RESPONSE_CODE" -lt 299 ]; then
                echo "Successfully locked."
                exit 0
            else
                echo "Failed to lock the environment."
                echo "Response code was: $RESPONSE_CODE"
                exit 1
            fi
        elif [ "$ENV_IS_LOCKED_TO_THIS_USER" -gt 0 ]; then
            echo "Environment is already locked to this user. Carrying on."
            exit 0
        else
            echo "Environment is locked to another user. Not going to deploy."
            exit 1
        fi
